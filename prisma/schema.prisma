// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // change from default
}

datasource db {
  provider = "sqlite" // d1 is sql base database
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  address   String?
  phone     String?
  orders    Order[] // Quan hệ 1-n với bảng Order
  status    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
}

model Category {
  id          String              @id @default(uuid())
  name        String
  slug        String
  description String?
  products    ProductOnCategory[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Product {
  id             String              @id @default(uuid())
  name           String
  slug           String
  sku            String?
  keywords       String
  description    String?
  specifications String?
  price          Float
  discount       Float               @default(0)
  images         String
  stock          Int                 @default(0)
  status         String
  categories     ProductOnCategory[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  OrderItem      OrderItem[]
  Cart           Cart[]
}

model ProductOnCategory {
  categoryId String
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([categoryId, productId]) // Composite primary key
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Quan hệ n-1 với bảng User
  status     String
  total      Float
  note       String?
  noteAdmin  String?
  orderItems OrderItem[] // Quan hệ 1-n với bảng OrderItem
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade) // Quan hệ n-1 với bảng Order
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // Quan hệ n-1 với bảng Product
  quantity  Int
  price     Float
  discount  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id]) // Quan hệ n-1 với bảng User
  productId String
  product   Product  @relation(fields: [productId], references: [id]) // Quan hệ n-1 với bảng Product
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
